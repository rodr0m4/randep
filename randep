#!/usr/bin/env python3
import os, magic, argparse
from re import compile, match
from random import choice
from subprocess import call
randep_home = os.path.join(os.environ['HOME'], '.local/share/randep/')

def get_parser():
    parser = argparse.ArgumentParser('Play a random video from a directory(and its subdirectories)')
    
    parser.add_argument('directory', type=str, nargs='?', help="directory from whom to choose")
    parser.add_argument('-l', '--last', help="replay the last video", action="store_true")
    parser.add_argument('-p', '--player', nargs=1, help="which video player to use")
    parser.add_argument('-c', '--change-directory', metavar='DIR', nargs=1, help="change the default directory, it wont open any video file")

    return parser

#Choses random file from directory and its subdirectories.
#The file's header type description must check (TODO: check?) the pattern
#
#TODO: max level of recursion in directories with a lot of files and directories
def choose(directory, pattern):
    chosen = choice(os.listdir(directory))
    chosen = os.path.join(directory, chosen)

    # If chosen is a valid file
    if (os.path.isfile(chosen) and match(pattern, magic.from_file(chosen))): 
        return chosen
    # If chosen is a non-empty directory
    elif (os.path.isdir(chosen) and os.listdir(chosen)):
        return choose(chosen, pattern)
    # If chosen is a dead end (empty directory)
    else:
        return choose(directory, pattern)

#Preppend text to the start of a file
def preppend(filename, line):
    with open(filename, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write(line.rstrip('\r\n') + '\n' + content)

#If not provided with player_argument it will return the default directory
#Otherwise it will return player_argument 
#
#TODO: check if player_argument is a valid video player?
def get_player(player_argument):
    if (not player_argument):
        with open(os.path.join(randep_home, 'player'), 'r') as f:
            return f.readline().rstrip()
    else:
        return player_argument

#Works solely on side effects:
#If directory_argument is nil it will return nil,
#If it's not a file it will raise an exception,
#Otherwise it will change the directory file.
def change_directory(directory_argument):
    if (not directory_argument):
        return

    if (not os.path.isdir(directory_argument[0])):
        raise FileNotFoundError(directory_argument + ' is not a valid directory')

    with open(os.path.join(randep_home, 'directory'), 'r+') as f:
        f.truncate()
        f.write(directory_argument[0])
        print('Succesfully changed default directory to: ' + directory_argument[0])
        return directory_argument

#If not provied with directory_argument, returns default directory,
#If it's not a file it will raise an exception, 
#Otherwise returns directory_argument
def get_directory(directory_argument):
    if(not directory_argument):
        with open(os.path.join(randep_home, 'directory'), 'r') as f:
            return f.readline().rstrip()
    
    if(not os.path.isdir(directory_argument)):
        raise FileNotFoundError(directory_argument + ' is not a valid directory')
    
    return directory_argument

def main():
    history = os.path.join(randep_home, 'history')

    parser = get_parser()
    args = parser.parse_args()

    #Using side effect of change_directory.
    if (change_directory(args.change_directory)):
        return 0    
    
    player = get_player(args.player)

    # If run with -l plays the first item from history file, without preppending.
    if (args.last):
        with open(history, 'r') as f:
            chosen = os.path.normpath(f.readline().rstrip())
            call([player, chosen])
            return 0

    directory = get_directory(args.directory)

    chosen = choose(directory, "Video|Matroska")
    preppend(history, chosen)

    call([player, chosen])
    return 0

if __name__ == "__main__":
    main()

